{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Push your Django Apps to Heroku \u00b6 Mohsin Mahmood edited this page on May 22, 2019 Heroku is a cloud application platform, it is a PaaS (Platform-as-a-service) service. It allows you to deploy your web application from your localhost to cloud so that your application could be commercialized and could get production ready. 1. Preparing your application \u00b6 Copy the Project folder separately for deployment. 2. Initialize Git Repositor \u00b6 Install Git Press WIN + R Type cmd and click OK Navigate to project folder Make sure your are in the directory where the manage.py exists 1 2 3 4 git config --global user.name \"Your Name\" git config --global user.email \"you@youraddress.com\" git config --global user.email \"you@youraddress.com\" git init 3. Add Files To Git \u00b6 1 2 3 git add --all git commit -m \"Commit Message\" git push 4. Activate Virtual Environment \u00b6 Activating virtual environment. 1 2 3 4 manage.py # The configuration file. venv/ Scripts/ activate Run these command to activate the environment. 1 2 cd venv/Scripts/ activate If virtual environment not already exists. Run these commands on command prompt. 1 pip install virtualenv Install all the required libraries that your project required via pip command. Plus install the following dependencies in your virtual environment. 1 2 3 pip install gunicorn pip install django-heroku pip install python-decouple django-heroku: official package by Heroku which made our deployment simple. 5 Modify Setting.py file \u00b6 Now, In app/settings.py file add below content 1 2 3 4 #import os import django_heroku from decouple import config import dj_database_url At the end of the setting.py file add this line also. 1 django_heroku . settings ( locals ()) Now we need to hide the SECRET_KEY from the deployment code. For this, add this line of code before SECRET_KEY = \"Djfhslkdfsjf*(skdf0suerjwehksjdf\" 1 SECRET_KEY = config ( 'SECRET_KEY' ) Move your actual SECRET_KEY to the .env file that we are going to create. 6. Create a file .env \u00b6 Now, run a command in your terminal.It will create a file .env in your app directory. 1 touch .env Add your SECRET_KEY from setting.py to .env file. 7. Adding more to setting.py \u00b6 Do this in your app/settings.py . 1 2 3 4 STATICFILES_DIRS = [ os . path . join ( BASE_DIR , \"static\" ) ] Make sure you do not have this command in setting.py file already. If so remain it as it is. For more info 1 STATIC_ROOT = os . path . join ( BASE_DIR , 'staticfiles' ) 8. Static file serving for web apps \u00b6 To serve static assets I use the WhiteNoise project. To install: pip install whitenoise For more info Do this in your app/settings.py file. 1 2 3 4 5 6 #... #'django.middleware.security.SecurityMiddleware', 'whitenoise.middleware.WhiteNoiseMiddleware' , #'django.contrib.sessions.middleware.SessionMiddleware', #'django.middleware.common.CommonMiddleware', #... 1 STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage' 9. Create a Procfile \u00b6 Open the command prompt in your directory and type this command. Make sure you type Procfile correctly (casesensitve) 1 touch Procfile Open the Procfile and add this line in the file. 1 web: gunicorn <project name>.wsgi 10. Run Django Server \u00b6 Type this command in the command promt to open the django server. 1 python manage.py runserver run this command too. 1 python manage.py migrate If your site is working correctly then move to next step. 11. Creating a file requirements.txt \u00b6 This command create a file requiremets.txt and add all the dependencies that your application needed while pushing to heroku. 1 pip freeze > requirements.txt add dependency requests==2.21.0 to the requirements.txt file. 12. Heroku Sign up \u00b6 Start a heroku account\u200a\u2014\u200aSign up. Install Heroku Toolbelt commands After installing heroku toolbelt your terminal will support all the heroku commands.Open your terminal as administrator and run this code 1 heroku login login to your heroku account via terminal Enter your Heroku credentials. 1 2 3 Email: example@gmail.com Password (typing will be hidden): Authentication successful. Inside the project root, create a Heroku App: 1 heroku create Adding a Heroku app to Git remote 1 heroku git:remote -a <APPNAME> Open the heroku dashboard and navigate to your new created app. In setting tab, add the config vars: SECRET_KEY 13. Update Git repository \u00b6 1 2 3 git add --all git status # to view all the changes git commit -m \"ready to push\" 14. Finally Push to Heroku \u00b6 1 git push heroku master","title":"Django | Heroku"},{"location":"#push-your-django-apps-to-heroku","text":"Mohsin Mahmood edited this page on May 22, 2019 Heroku is a cloud application platform, it is a PaaS (Platform-as-a-service) service. It allows you to deploy your web application from your localhost to cloud so that your application could be commercialized and could get production ready.","title":"Push your Django Apps to Heroku"},{"location":"#1-preparing-your-application","text":"Copy the Project folder separately for deployment.","title":"1. Preparing your application"},{"location":"#2-initialize-git-repositor","text":"Install Git Press WIN + R Type cmd and click OK Navigate to project folder Make sure your are in the directory where the manage.py exists 1 2 3 4 git config --global user.name \"Your Name\" git config --global user.email \"you@youraddress.com\" git config --global user.email \"you@youraddress.com\" git init","title":"2. Initialize Git Repositor"},{"location":"#3-add-files-to-git","text":"1 2 3 git add --all git commit -m \"Commit Message\" git push","title":"3. Add Files To Git"},{"location":"#4-activate-virtual-environment","text":"Activating virtual environment. 1 2 3 4 manage.py # The configuration file. venv/ Scripts/ activate Run these command to activate the environment. 1 2 cd venv/Scripts/ activate If virtual environment not already exists. Run these commands on command prompt. 1 pip install virtualenv Install all the required libraries that your project required via pip command. Plus install the following dependencies in your virtual environment. 1 2 3 pip install gunicorn pip install django-heroku pip install python-decouple django-heroku: official package by Heroku which made our deployment simple.","title":"4. Activate Virtual Environment"},{"location":"#5-modify-settingpy-file","text":"Now, In app/settings.py file add below content 1 2 3 4 #import os import django_heroku from decouple import config import dj_database_url At the end of the setting.py file add this line also. 1 django_heroku . settings ( locals ()) Now we need to hide the SECRET_KEY from the deployment code. For this, add this line of code before SECRET_KEY = \"Djfhslkdfsjf*(skdf0suerjwehksjdf\" 1 SECRET_KEY = config ( 'SECRET_KEY' ) Move your actual SECRET_KEY to the .env file that we are going to create.","title":"5 Modify Setting.py file"},{"location":"#6-create-a-file-env","text":"Now, run a command in your terminal.It will create a file .env in your app directory. 1 touch .env Add your SECRET_KEY from setting.py to .env file.","title":"6. Create a file .env"},{"location":"#7-adding-more-to-settingpy","text":"Do this in your app/settings.py . 1 2 3 4 STATICFILES_DIRS = [ os . path . join ( BASE_DIR , \"static\" ) ] Make sure you do not have this command in setting.py file already. If so remain it as it is. For more info 1 STATIC_ROOT = os . path . join ( BASE_DIR , 'staticfiles' )","title":"7. Adding more to setting.py"},{"location":"#8-static-file-serving-for-web-apps","text":"To serve static assets I use the WhiteNoise project. To install: pip install whitenoise For more info Do this in your app/settings.py file. 1 2 3 4 5 6 #... #'django.middleware.security.SecurityMiddleware', 'whitenoise.middleware.WhiteNoiseMiddleware' , #'django.contrib.sessions.middleware.SessionMiddleware', #'django.middleware.common.CommonMiddleware', #... 1 STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'","title":"8. Static file serving for web apps"},{"location":"#9-create-a-procfile","text":"Open the command prompt in your directory and type this command. Make sure you type Procfile correctly (casesensitve) 1 touch Procfile Open the Procfile and add this line in the file. 1 web: gunicorn <project name>.wsgi","title":"9. Create a Procfile"},{"location":"#10-run-django-server","text":"Type this command in the command promt to open the django server. 1 python manage.py runserver run this command too. 1 python manage.py migrate If your site is working correctly then move to next step.","title":"10. Run Django Server"},{"location":"#11-creating-a-file-requirementstxt","text":"This command create a file requiremets.txt and add all the dependencies that your application needed while pushing to heroku. 1 pip freeze > requirements.txt add dependency requests==2.21.0 to the requirements.txt file.","title":"11. Creating a file requirements.txt"},{"location":"#12-heroku-sign-up","text":"Start a heroku account\u200a\u2014\u200aSign up. Install Heroku Toolbelt commands After installing heroku toolbelt your terminal will support all the heroku commands.Open your terminal as administrator and run this code 1 heroku login login to your heroku account via terminal Enter your Heroku credentials. 1 2 3 Email: example@gmail.com Password (typing will be hidden): Authentication successful. Inside the project root, create a Heroku App: 1 heroku create Adding a Heroku app to Git remote 1 heroku git:remote -a <APPNAME> Open the heroku dashboard and navigate to your new created app. In setting tab, add the config vars: SECRET_KEY","title":"12. Heroku Sign up"},{"location":"#13-update-git-repository","text":"1 2 3 git add --all git status # to view all the changes git commit -m \"ready to push\"","title":"13. Update Git repository"},{"location":"#14-finally-push-to-heroku","text":"1 git push heroku master","title":"14. Finally Push to Heroku"},{"location":"git-guide-101/","text":"Git Guide 101 \u00b6 Commit \u00b6 The \"commit\" command is used to save your changes to the local repository. Initialized a repository \u00b6 1 git init Add a file to the staging area \u00b6 1 git add --all Commiting files \u00b6 1 2 git commit -m \"message\" git commit -am \"message with adding file to the staging area \" Repository log \u00b6 1 git log Repository status \u00b6 1 git status Unstaging files \u00b6 1 2 3 4 git reset --hard git diff <1stVer commit hash> <LastVer commit hash> :: difference btw changes made Branch \u00b6 In Git, branches are a part of your everyday development process. Git branches are effectively a pointer to a snapshot of your changes. When you want to add a new feature or fix a bug\u2014no matter how big or how small\u2014you spawn a new branch to encapsulate your changes. This makes it harder for unstable code to get merged into the main code base, and it gives you the chance to clean up your future's history before merging it into the main branch. Create a branch \u00b6 1 2 git branch <branch-name> git checkout -b <branch-name> Merging a branch \u00b6 1 git merge <source-branch-name> Listing branches \u00b6 1 2 git branch git brach --list Removing a branch \u00b6 1 git brach -d Create a tag \u00b6 1 git tag <tag-name> Replace a tag \u00b6 1 git tag -f <new-tag-name> Listing tags \u00b6 1 2 git tag -l git tag Removing a tag \u00b6 1 git tag -d <tag-name> Fixing Common issues \u00b6 \u00b6 1 git log --oneline Be carefull! When you ammend a commit, this will remove the tag from the commit if it has already Add tag to the latest ammend \u00b6 1 2 3 git tag git log --online git tag -f <update-tag> Show all changes \u00b6 1 git reflog Checkout differert state in the repository \u00b6 1 git reset HEAD@{5} Changes sitting there older version of this file \u00b6 1 2 3 4 5 6 git reset --hard or git reset HEAD@{3} --hard Reset Back to previous commits. \u00b6 1 2 git log --oneline git reset HEAD~2 --hard Last Commit gone but changes sitting there \u00b6 1 git reset HEAD~ --soft Stash -- file no need to put into stage \u00b6 1 git stash Taking stash file to the staging folder \u00b6 1 2 3 git stash pop git add --all git commit -m \"<message>\" Switch between branches A/B B/A \u00b6 1 git checkout - push an existing repository from the command line \u00b6 1 2 git remote add origin https://github.com/mohsinmdl/GTIN-Prediction-System.git git push -u origin master","title":"Git Guide 101"},{"location":"git-guide-101/#git-guide-101","text":"","title":"Git Guide 101"},{"location":"git-guide-101/#commit","text":"The \"commit\" command is used to save your changes to the local repository.","title":"Commit"},{"location":"git-guide-101/#initialized-a-repository","text":"1 git init","title":"Initialized a repository"},{"location":"git-guide-101/#add-a-file-to-the-staging-area","text":"1 git add --all","title":"Add a file to the staging area"},{"location":"git-guide-101/#commiting-files","text":"1 2 git commit -m \"message\" git commit -am \"message with adding file to the staging area \"","title":"Commiting files"},{"location":"git-guide-101/#repository-log","text":"1 git log","title":"Repository log"},{"location":"git-guide-101/#repository-status","text":"1 git status","title":"Repository status"},{"location":"git-guide-101/#unstaging-files","text":"1 2 3 4 git reset --hard git diff <1stVer commit hash> <LastVer commit hash> :: difference btw changes made","title":"Unstaging files"},{"location":"git-guide-101/#branch","text":"In Git, branches are a part of your everyday development process. Git branches are effectively a pointer to a snapshot of your changes. When you want to add a new feature or fix a bug\u2014no matter how big or how small\u2014you spawn a new branch to encapsulate your changes. This makes it harder for unstable code to get merged into the main code base, and it gives you the chance to clean up your future's history before merging it into the main branch.","title":"Branch"},{"location":"git-guide-101/#create-a-branch","text":"1 2 git branch <branch-name> git checkout -b <branch-name>","title":"Create a branch"},{"location":"git-guide-101/#merging-a-branch","text":"1 git merge <source-branch-name>","title":"Merging a branch"},{"location":"git-guide-101/#listing-branches","text":"1 2 git branch git brach --list","title":"Listing branches"},{"location":"git-guide-101/#removing-a-branch","text":"1 git brach -d","title":"Removing a branch"},{"location":"git-guide-101/#create-a-tag","text":"1 git tag <tag-name>","title":"Create a tag"},{"location":"git-guide-101/#replace-a-tag","text":"1 git tag -f <new-tag-name>","title":"Replace a tag"},{"location":"git-guide-101/#listing-tags","text":"1 2 git tag -l git tag","title":"Listing tags"},{"location":"git-guide-101/#removing-a-tag","text":"1 git tag -d <tag-name>","title":"Removing a tag"},{"location":"git-guide-101/#fixing-common-issues","text":"","title":"Fixing Common issues"},{"location":"git-guide-101/#_1","text":"1 git log --oneline Be carefull! When you ammend a commit, this will remove the tag from the commit if it has already","title":""},{"location":"git-guide-101/#add-tag-to-the-latest-ammend","text":"1 2 3 git tag git log --online git tag -f <update-tag>","title":"Add tag to the latest ammend"},{"location":"git-guide-101/#show-all-changes","text":"1 git reflog","title":"Show all changes"},{"location":"git-guide-101/#checkout-differert-state-in-the-repository","text":"1 git reset HEAD@{5} Changes sitting there","title":"Checkout differert state in the repository"},{"location":"git-guide-101/#older-version-of-this-file","text":"1 2 3 4 5 6 git reset --hard or git reset HEAD@{3} --hard","title":"older version of this file"},{"location":"git-guide-101/#reset-back-to-previous-commits","text":"1 2 git log --oneline git reset HEAD~2 --hard","title":"Reset Back to previous commits."},{"location":"git-guide-101/#last-commit-gone-but-changes-sitting-there","text":"1 git reset HEAD~ --soft","title":"Last Commit gone but changes sitting there"},{"location":"git-guide-101/#stash-file-no-need-to-put-into-stage","text":"1 git stash","title":"Stash -- file no need to put into stage"},{"location":"git-guide-101/#taking-stash-file-to-the-staging-folder","text":"1 2 3 git stash pop git add --all git commit -m \"<message>\"","title":"Taking stash file to the staging folder"},{"location":"git-guide-101/#switch-between-branches-ab-ba","text":"1 git checkout -","title":"Switch between branches A/B B/A"},{"location":"git-guide-101/#push-an-existing-repository-from-the-command-line","text":"1 2 git remote add origin https://github.com/mohsinmdl/GTIN-Prediction-System.git git push -u origin master","title":"push an existing repository from the command line"},{"location":"output/","text":"Welcome to day 1 of the Python Challenge! If you're here to learn Python, you've come to the right place. If you already have some Python experience, I hope I can teach you at least a few new tricks, or throw you a few challenging problems. If you're here to learn how to use Python for machine learning, data analysis, or visualization, then bad news: I won't be teaching any of that. Good news: we have several tracks on Kaggle Learn for just that purpose. The goal of this challenge is to quickly cover the fundamentals of the language - which will hopefully stand you in good stead whether you use Python for deep learning, data cleaning, or cheating at Scrabble. Each day of the Python Challenge will consist of two parts: - A tutorial notebook explaining Python concepts and showing example code. That's where you are now. - An exercise notebook with questions and coding problems to test your new knowledge. Today's tutorial includes a brief overview of Python syntax, variable assignment, and arithmetic operators. If you have previous Python experience, day 1 might not hold anything new for you, so feel free to skip straight to the exercise . These lessons borrow and adapt some content from A Whirlwind Tour of Python . Thanks to the author, Jake VanderPlas, for releasing it under a permissive license. If you're interested in a more thorough, theoretical grounding in Python, I encourage you to check out WTOP. Hello, Python! \u00b6 Python was named for the British comedy troupe Monty Python , so why not make our first Python program an homage to their famous [Spam]( https://en.wikipedia.org/wiki/Spam_(Monty_Python%29 ) skit? Just for fun, try reading over the code below and predicting what it's going to do when run. (If you have no idea, that's fine!) Then click the \"output\" button to see the results of our program. 1 2 3 4 5 6 7 8 9 10 11 spam_amount = 0 print ( spam_amount ) # Ordering Spam, egg, Spam, Spam, bacon and Spam (4 more servings of Spam) spam_amount = spam_amount + 4 if spam_amount > 0 : print ( \"But I don't want ANY spam!\" ) viking_song = \"Spam \" * spam_amount print ( viking_song ) There's a lot to unpack here! This silly program demonstrates many important aspects of what Python code looks like (its syntax ) and how it works (its semantics ). Let's run down the code from top to bottom. 1 spam_amount = 0 Variable assignment! Here we create a variable called spam_amount and assign it the value of 0 using = , Python's assignment operator. Aside : If you've programmed in certain other languages (like Java or C++), you might be noticing some things Python doesn't require us to do here: - we don't need to \"declare\" spam_amount before assigning to it - we don't need to tell Python what type of value spam_amount is going to refer to. In fact, we can even go on to reassign spam_amount to refer to a different sort of thing like a string or a boolean. 1 print ( spam_amount ) A function call . print is an extremely useful builtin Python function that displays the value passed to it on the screen. We call functions by putting parentheses after their name, with the inputs to the function (or arguments ) in between. 1 2 # Ordering Spam, egg, Spam, Spam, bacon and Spam (4 more servings of Spam) spam_amount = spam_amount + 4 The first line above is a comment . In Python, comments begin with the # symbol. Next we see an example of reassignment. Reassigning the value of an existing variable looks just the same as creating a variable - it still uses the = assignment operator. In this case, the value we're assigning to spam_amount involves a little simple arithmetic on its previous value. When it encounters this line, Python evaluates the expression on the right-hand-side of the = (0 + 4 = 4), and then assigns that value to the variable on the left- hand-side. 1 2 if spam_amount > 0 : print ( \"But I don't want ANY spam!\" ) We won't talk much about conditionals until later, but, even if you've never coded before, you can probably guess what this does. Python is prized for its readability and the simplicity of its syntax (with some going as far as to call it \"executable pseudocode\"). Note how we indicated which code belongs to the if . \"But I don't want ANY spam!\" is only supposed to be printed if spam_amount is positive. But the later code (like print(viking_song) ) should be executed no matter what. How do we (and Python) know that? The colon ( : ) at the end of the if line indicates that a new \"code block\" is coming up. Subsequent lines which are indented (beginning with an extra 4 spaces) are part of that code block. You may be familiar with other languages which use { curly braces } to mark the beginning and end of code blocks. Python's use of meaningful whitespace often is surprising to programmers who are accustomed to other languages, but in practice it can lead to more consistent and readable code than languages that do not enforce indentation of code blocks. The later lines dealing with viking_song are not indented with an extra 4 spaces, so they're not a part of the if 's code block. We'll see more examples of indented code blocks later when we start defining functions and using loops. This code snippet is also our first sighting of a string in Python: 1 2 \"But I don 't want ANY spam!\" Strings can be marked either by double or single quotation marks. (But because this particular string contains a single-quote character, we might confuse Python by trying to surround it with single-quotes, unless we're careful.) 1 2 viking_song = \"Spam \" * spam_amount print ( viking_song ) The * operator can be used to multiply two numbers ( 3 * 3 evaluates to 9), but amusingly enough, we can also multiply a string by a number, to get a version that's been repeated that many times. Python offers a number of cheeky little time-saving tricks like this where operators like * and + have a different meaning depending on what kind of thing they're applied to. (The technical term for this is operator overloading ) Numbers and arithmetic in Python \u00b6 We've already seen an example of a variable containing a number above: 1 spam_amount = 0 \"Number\" is a fine informal name for the kind of thing, but if we wanted to be more technical, we could ask Python how it would describe the type of thing that spam_amount is: 1 type ( spam_amount ) It's an int - short for integer. There's another sort of number we commonly encounter in Python: 1 type ( 19.95 ) A float is a number with a decimal place - very useful for representing things like weights or proportions. type() is the second built-in function we've seen (after print() ), and it's another good one to remember. It's very useful to be able to ask Python \"what kind of thing is this?\". A natural thing to want to do with numbers is perform arithmetic. We've seen the + operator for addition, and the * operator for multiplication (of a sort). Python also has us covered for the rest of the basic buttons on your calculator: | Operator | Name | Description | |--------------|----------------|--------------------------------------------------------| | a + b | Addition | Sum of a and b | | a - b | Subtraction | Difference of a and b | | a * b | Multiplication | Product of a and b | | a / b | True division | Quotient of a and b | | a // b | Floor division | Quotient of a and b , removing fractional parts | | a % b | Modulus | Integer remainder after division of a by b | | a ** b | Exponentiation | a raised to the power of b | | -a | Negation | The negative of a | hack One interesting observation here is that, whereas your calculator probably just has one button for division, Python can do two kinds. \"True division\" is basically what your calculator does: 1 2 print ( 5 / 2 ) print ( 6 / 2 ) It always gives us a float . The // operator gives us a result that's rounded down to the next integer. 1 2 print ( 5 // 2 ) print ( 6 // 2 ) Can you think of where this would be useful? You may see an example soon in the coding problems. Order of operations \u00b6 The arithmetic we learned in primary school has conventions about the order in which operations are evaluated. Some remember these by a mnemonic such as PEMDAS - **P**arentheses, **E**xponents, **M**ultiplication/**D**ivision, **A**ddition/**S**ubtraction. Python follows similar rules about which calculations to perform first. They're mostly pretty intuitive. 1 8 - 3 + 2 1 - 3 + 4 * 2 Sometimes the default order of operations isn't what we want: 1 2 3 4 5 hat_height_cm = 25 my_height_cm = 190 # How tall am I, in meters, when wearing my hat? total_height_meters = hat_height_cm + my_height_cm / 100 print ( \"Height in meters =\" , total_height_meters , \"?\" ) Parentheses are your trump card. You can add them to force Python to evaluate sub-expressions in a different order (or just to make your code easier to read). 1 2 total_height_meters = ( hat_height_cm + my_height_cm ) / 100 print ( \"Height in meters =\" , total_height_meters ) Builtin functions for working with numbers \u00b6 min and max return the minimum and maximum of their arguments, respectively... 1 2 print ( min ( 1 , 2 , 3 )) print ( max ( 1 , 2 , 3 )) abs returns the absolute value of it argument: 1 2 print ( abs ( 32 )) print ( abs ( - 32 )) In addition to being the names of Python's two main numerical types, int and float can also be called as functions which convert their arguments to the corresponding type: 1 2 3 4 print ( float ( 10 )) print ( int ( 3.33 )) # They can even be called on strings! print ( int ( '807' ) + 1 ) Your turn! \u00b6 Head over to the Exercises notebook to get some hands-on practice writing Python.","title":"Markdown"},{"location":"output/#hello-python","text":"Python was named for the British comedy troupe Monty Python , so why not make our first Python program an homage to their famous [Spam]( https://en.wikipedia.org/wiki/Spam_(Monty_Python%29 ) skit? Just for fun, try reading over the code below and predicting what it's going to do when run. (If you have no idea, that's fine!) Then click the \"output\" button to see the results of our program. 1 2 3 4 5 6 7 8 9 10 11 spam_amount = 0 print ( spam_amount ) # Ordering Spam, egg, Spam, Spam, bacon and Spam (4 more servings of Spam) spam_amount = spam_amount + 4 if spam_amount > 0 : print ( \"But I don't want ANY spam!\" ) viking_song = \"Spam \" * spam_amount print ( viking_song ) There's a lot to unpack here! This silly program demonstrates many important aspects of what Python code looks like (its syntax ) and how it works (its semantics ). Let's run down the code from top to bottom. 1 spam_amount = 0 Variable assignment! Here we create a variable called spam_amount and assign it the value of 0 using = , Python's assignment operator. Aside : If you've programmed in certain other languages (like Java or C++), you might be noticing some things Python doesn't require us to do here: - we don't need to \"declare\" spam_amount before assigning to it - we don't need to tell Python what type of value spam_amount is going to refer to. In fact, we can even go on to reassign spam_amount to refer to a different sort of thing like a string or a boolean. 1 print ( spam_amount ) A function call . print is an extremely useful builtin Python function that displays the value passed to it on the screen. We call functions by putting parentheses after their name, with the inputs to the function (or arguments ) in between. 1 2 # Ordering Spam, egg, Spam, Spam, bacon and Spam (4 more servings of Spam) spam_amount = spam_amount + 4 The first line above is a comment . In Python, comments begin with the # symbol. Next we see an example of reassignment. Reassigning the value of an existing variable looks just the same as creating a variable - it still uses the = assignment operator. In this case, the value we're assigning to spam_amount involves a little simple arithmetic on its previous value. When it encounters this line, Python evaluates the expression on the right-hand-side of the = (0 + 4 = 4), and then assigns that value to the variable on the left- hand-side. 1 2 if spam_amount > 0 : print ( \"But I don't want ANY spam!\" ) We won't talk much about conditionals until later, but, even if you've never coded before, you can probably guess what this does. Python is prized for its readability and the simplicity of its syntax (with some going as far as to call it \"executable pseudocode\"). Note how we indicated which code belongs to the if . \"But I don't want ANY spam!\" is only supposed to be printed if spam_amount is positive. But the later code (like print(viking_song) ) should be executed no matter what. How do we (and Python) know that? The colon ( : ) at the end of the if line indicates that a new \"code block\" is coming up. Subsequent lines which are indented (beginning with an extra 4 spaces) are part of that code block. You may be familiar with other languages which use { curly braces } to mark the beginning and end of code blocks. Python's use of meaningful whitespace often is surprising to programmers who are accustomed to other languages, but in practice it can lead to more consistent and readable code than languages that do not enforce indentation of code blocks. The later lines dealing with viking_song are not indented with an extra 4 spaces, so they're not a part of the if 's code block. We'll see more examples of indented code blocks later when we start defining functions and using loops. This code snippet is also our first sighting of a string in Python: 1 2 \"But I don 't want ANY spam!\" Strings can be marked either by double or single quotation marks. (But because this particular string contains a single-quote character, we might confuse Python by trying to surround it with single-quotes, unless we're careful.) 1 2 viking_song = \"Spam \" * spam_amount print ( viking_song ) The * operator can be used to multiply two numbers ( 3 * 3 evaluates to 9), but amusingly enough, we can also multiply a string by a number, to get a version that's been repeated that many times. Python offers a number of cheeky little time-saving tricks like this where operators like * and + have a different meaning depending on what kind of thing they're applied to. (The technical term for this is operator overloading )","title":"Hello, Python!"},{"location":"output/#numbers-and-arithmetic-in-python","text":"We've already seen an example of a variable containing a number above: 1 spam_amount = 0 \"Number\" is a fine informal name for the kind of thing, but if we wanted to be more technical, we could ask Python how it would describe the type of thing that spam_amount is: 1 type ( spam_amount ) It's an int - short for integer. There's another sort of number we commonly encounter in Python: 1 type ( 19.95 ) A float is a number with a decimal place - very useful for representing things like weights or proportions. type() is the second built-in function we've seen (after print() ), and it's another good one to remember. It's very useful to be able to ask Python \"what kind of thing is this?\". A natural thing to want to do with numbers is perform arithmetic. We've seen the + operator for addition, and the * operator for multiplication (of a sort). Python also has us covered for the rest of the basic buttons on your calculator: | Operator | Name | Description | |--------------|----------------|--------------------------------------------------------| | a + b | Addition | Sum of a and b | | a - b | Subtraction | Difference of a and b | | a * b | Multiplication | Product of a and b | | a / b | True division | Quotient of a and b | | a // b | Floor division | Quotient of a and b , removing fractional parts | | a % b | Modulus | Integer remainder after division of a by b | | a ** b | Exponentiation | a raised to the power of b | | -a | Negation | The negative of a | hack One interesting observation here is that, whereas your calculator probably just has one button for division, Python can do two kinds. \"True division\" is basically what your calculator does: 1 2 print ( 5 / 2 ) print ( 6 / 2 ) It always gives us a float . The // operator gives us a result that's rounded down to the next integer. 1 2 print ( 5 // 2 ) print ( 6 // 2 ) Can you think of where this would be useful? You may see an example soon in the coding problems.","title":"Numbers and arithmetic in Python"},{"location":"output/#order-of-operations","text":"The arithmetic we learned in primary school has conventions about the order in which operations are evaluated. Some remember these by a mnemonic such as PEMDAS - **P**arentheses, **E**xponents, **M**ultiplication/**D**ivision, **A**ddition/**S**ubtraction. Python follows similar rules about which calculations to perform first. They're mostly pretty intuitive. 1 8 - 3 + 2 1 - 3 + 4 * 2 Sometimes the default order of operations isn't what we want: 1 2 3 4 5 hat_height_cm = 25 my_height_cm = 190 # How tall am I, in meters, when wearing my hat? total_height_meters = hat_height_cm + my_height_cm / 100 print ( \"Height in meters =\" , total_height_meters , \"?\" ) Parentheses are your trump card. You can add them to force Python to evaluate sub-expressions in a different order (or just to make your code easier to read). 1 2 total_height_meters = ( hat_height_cm + my_height_cm ) / 100 print ( \"Height in meters =\" , total_height_meters )","title":"Order of operations"},{"location":"output/#builtin-functions-for-working-with-numbers","text":"min and max return the minimum and maximum of their arguments, respectively... 1 2 print ( min ( 1 , 2 , 3 )) print ( max ( 1 , 2 , 3 )) abs returns the absolute value of it argument: 1 2 print ( abs ( 32 )) print ( abs ( - 32 )) In addition to being the names of Python's two main numerical types, int and float can also be called as functions which convert their arguments to the corresponding type: 1 2 3 4 print ( float ( 10 )) print ( int ( 3.33 )) # They can even be called on strings! print ( int ( '807' ) + 1 )","title":"Builtin functions for working with numbers"},{"location":"output/#your-turn","text":"Head over to the Exercises notebook to get some hands-on practice writing Python.","title":"Your turn!"},{"location":"Contact/about/","text":"Majestic Technologix \u00b6 We help our customers reduce their revenue streams, increase their bottom line productivity through advanced web development + data science solutions. Our staff provides an opportunity to find innovative ways to strategically analyze and optimize operations when learning new market perspectives. We are one of the top data science companies in Pakistan that offers unique advantages. Developer \u00b6 Muhammad Mohsin Email: mohsinmahmoodmdl@gmail.com Github Profile: Github Contact Us \u00b6 Business Hour : Monday \u2013 Friday : 9am to 5pm Address : Plot No. 3, Block No. P, Valancia Town, Lahore E-mail : info[@]majestictechnologix.com Contact Info : (92) 3078820677 , (92) 3005634937","title":"About"},{"location":"Contact/about/#majestic-technologix","text":"We help our customers reduce their revenue streams, increase their bottom line productivity through advanced web development + data science solutions. Our staff provides an opportunity to find innovative ways to strategically analyze and optimize operations when learning new market perspectives. We are one of the top data science companies in Pakistan that offers unique advantages.","title":"Majestic Technologix"},{"location":"Contact/about/#developer","text":"Muhammad Mohsin Email: mohsinmahmoodmdl@gmail.com Github Profile: Github","title":"Developer"},{"location":"Contact/about/#contact-us","text":"Business Hour : Monday \u2013 Friday : 9am to 5pm Address : Plot No. 3, Block No. P, Valancia Town, Lahore E-mail : info[@]majestictechnologix.com Contact Info : (92) 3078820677 , (92) 3005634937","title":"Contact Us"},{"location":"Contact/ass2/","text":"Examples of Structural pattern in core Java libraries: \u00b6 Facade Design Pattern \u00b6 javax.faces.context.ExternalContext \u00b6 Java Server Faces (JSF) is a Java-based web application framework intended to simplify development integration of web-based user interfaces This class allows the Faces API to be unaware of the nature of its containing application environment. In particular, this class allows JavaServer Faces based appications to run in either a Servlet or a Portlet environment. Servlets can render complete web pages, whereas portlets renders html fragments. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 /** *Returns the servlet context object from the FacesContext * * @param context * @return */ private Object _getServletContextFromFacesContext ( FacesContext context ) { ExternalContext ec = null ; Object sc = null ; if ( context != null ) { ec = context . getExternalContext (); if ( ec != null ) { sc = ec . getContext (); } } return sc ; } Flyweight Design Pattern \u00b6 Libraries use flyweight java.lang.Integer.valueOf(int) \u00b6 Also use with Boolean, Byte, Character, Short, Long, BigDecimal The Flyweight pattern has a single purpose: minimizing memory intake. If your program doesn\u2019t struggle with a shortage of RAM, then you might just ignore this pattern for a while. If you call the method twice with the same argument, it may return the same object thereby limiting the memory usage. This fits the definition of flyweight pattern. If we look at the source for valueOf, we can get a hint: Source of java.lang.Integer: 1 2 3 4 5 6 public static Integer valueOf ( int i ) { assert IntegerCache . high >= 127 ; if ( i >= IntegerCache . low && i <= IntegerCache . high ) return IntegerCache . cache [ i + ( - IntegerCache . low ) ] ; return new Integer ( i ); } Adapter Design Pattern \u00b6 Java Libraries use Adapter Design Pattern - java.util.Arrays#asList() - java.util.Collections#list( ) - java.util.Collections#enumeration() - java.io.InputStreamReader(InputStream) (returns a Reader object) The Adapter pattern is pretty common in Java code. It\u2019s very often used in systems based on some legacy code. In such cases, Adapters make legacy code with modern classes. The asList() method of java.util.Arrays class is used to return a fixed-size list backed by the specified array. 1 2 3 4 5 6 7 8 // creating Arrays of String type String a [] = new String [] { \"A\" , \"B\" , \"C\" , \"D\" }; // getting the list view of Array List < String > list = Arrays . asList ( a ); // printing the list System . out . println ( \"The list is: \" + list ); Output: The list is: [A, B, C, D] Decorator Design Pattern \u00b6 Decorator in Java All subclasses of java.io.InputStream , OutputStream , Reader and Writer have constructors that accept objects of their own type. java.util.Collections methods checkedXXX() , synchronizedXXX() and unmodifiableXXX() . Checked Collections Examples \u00b6 The Collections class also provides the checkedXXX() methods that returns a dynamically typesafe view of the specified collection. Consider an example. The following statements create a checked list and pass it to a third-party library method: 1 2 3 List < String > listNames = Collections . checkedList ( new ArrayList <> (), String . class ); thirdpartyMethod ( listNames ); Suppose that the third-party library method is written like this: 1 2 3 4 5 6 public void thirdpartyMethod ( List list ) { list . add ( \"Tom\" ); // ok list . add ( \"Tom\" ); // ok list . add ( 123 ); // throws ClassCastException }","title":"Assignment"},{"location":"Contact/ass2/#examples-of-structural-pattern-in-core-java-libraries","text":"","title":"Examples of Structural pattern in core Java libraries:"},{"location":"Contact/ass2/#facade-design-pattern","text":"","title":"Facade Design Pattern"},{"location":"Contact/ass2/#javaxfacescontextexternalcontext","text":"Java Server Faces (JSF) is a Java-based web application framework intended to simplify development integration of web-based user interfaces This class allows the Faces API to be unaware of the nature of its containing application environment. In particular, this class allows JavaServer Faces based appications to run in either a Servlet or a Portlet environment. Servlets can render complete web pages, whereas portlets renders html fragments. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 /** *Returns the servlet context object from the FacesContext * * @param context * @return */ private Object _getServletContextFromFacesContext ( FacesContext context ) { ExternalContext ec = null ; Object sc = null ; if ( context != null ) { ec = context . getExternalContext (); if ( ec != null ) { sc = ec . getContext (); } } return sc ; }","title":"javax.faces.context.ExternalContext"},{"location":"Contact/ass2/#flyweight-design-pattern","text":"Libraries use flyweight","title":"Flyweight Design Pattern"},{"location":"Contact/ass2/#javalangintegervalueofint","text":"Also use with Boolean, Byte, Character, Short, Long, BigDecimal The Flyweight pattern has a single purpose: minimizing memory intake. If your program doesn\u2019t struggle with a shortage of RAM, then you might just ignore this pattern for a while. If you call the method twice with the same argument, it may return the same object thereby limiting the memory usage. This fits the definition of flyweight pattern. If we look at the source for valueOf, we can get a hint: Source of java.lang.Integer: 1 2 3 4 5 6 public static Integer valueOf ( int i ) { assert IntegerCache . high >= 127 ; if ( i >= IntegerCache . low && i <= IntegerCache . high ) return IntegerCache . cache [ i + ( - IntegerCache . low ) ] ; return new Integer ( i ); }","title":"java.lang.Integer.valueOf(int)"},{"location":"Contact/ass2/#adapter-design-pattern","text":"Java Libraries use Adapter Design Pattern - java.util.Arrays#asList() - java.util.Collections#list( ) - java.util.Collections#enumeration() - java.io.InputStreamReader(InputStream) (returns a Reader object) The Adapter pattern is pretty common in Java code. It\u2019s very often used in systems based on some legacy code. In such cases, Adapters make legacy code with modern classes. The asList() method of java.util.Arrays class is used to return a fixed-size list backed by the specified array. 1 2 3 4 5 6 7 8 // creating Arrays of String type String a [] = new String [] { \"A\" , \"B\" , \"C\" , \"D\" }; // getting the list view of Array List < String > list = Arrays . asList ( a ); // printing the list System . out . println ( \"The list is: \" + list ); Output: The list is: [A, B, C, D]","title":"Adapter Design Pattern"},{"location":"Contact/ass2/#decorator-design-pattern","text":"Decorator in Java All subclasses of java.io.InputStream , OutputStream , Reader and Writer have constructors that accept objects of their own type. java.util.Collections methods checkedXXX() , synchronizedXXX() and unmodifiableXXX() .","title":"Decorator Design Pattern"},{"location":"Contact/ass2/#checked-collections-examples","text":"The Collections class also provides the checkedXXX() methods that returns a dynamically typesafe view of the specified collection. Consider an example. The following statements create a checked list and pass it to a third-party library method: 1 2 3 List < String > listNames = Collections . checkedList ( new ArrayList <> (), String . class ); thirdpartyMethod ( listNames ); Suppose that the third-party library method is written like this: 1 2 3 4 5 6 public void thirdpartyMethod ( List list ) { list . add ( \"Tom\" ); // ok list . add ( \"Tom\" ); // ok list . add ( 123 ); // throws ClassCastException }","title":"Checked Collections Examples"},{"location":"current/upgenics/jaeger/jaeger101/","text":"Bash 1 2 3 #!/bin/bash echo \"Hello world!\" C 1 2 3 4 5 #include <stdio.h> int main ( void ) { printf ( \"Hello world! \\n \" ); } C++ 1 2 3 4 5 6 #include <iostream> int main () { std :: cout << \"Hello world!\" << std :: endl ; return 0 ; } C# 1 2 3 4 5 6 7 using System ; class Program { static void Main ( string [] args ) { Console . WriteLine ( \"Hello world!\" ); } }","title":"Jaeger Implementation"},{"location":"designPattern/design-pattern-intro/","text":"What is Design Pattern \u00b6 Design patterns are typical solutions to commonly occurring problems in software design. They are like pre-made blueprints that you can customize to solve a recurring design problem in your code. You can\u2019t just find a pattern and copy it into your program, the way you can with off-the-shelf functions or libraries. The pattern is not a specific piece of code, but a general concept for solving a particular problem. You can follow the pattern details and implement a solution that suits the realities of your own program. Patterns are often confused with algorithms, because both concepts describe typical solutions to some known problems. While an algorithm always defines a clear set of actions that can achieve some goal, a pattern is a more high-level description of a solution. The code of the same pattern applied to two different programs may be different. An analogy to an algorithm is a cooking recipe: both have clear steps to achieve a goal. On the other hand, a pattern is more like a blueprint: you can see what the result and its features are, but the exact order of implementation is up to you. What does the pattern consist of? \u00b6 Most patterns are described very formally so people can reproduce them in many contexts. Here are the sections that are usually present in a pattern description: Intent of the pattern briefly describes both the problem and the solution. Motivation further explains the problem and the solution the pattern makes possible. Structure of classes shows each part of the pattern and how they are related. Code example in one of the popular programming languages makes it easier to grasp the idea behind the pattern. Some pattern catalogs list other useful details, such as applicability of the pattern, implementation steps and relations with other patterns.","title":"What is Design Pattern"},{"location":"designPattern/design-pattern-intro/#what-is-design-pattern","text":"Design patterns are typical solutions to commonly occurring problems in software design. They are like pre-made blueprints that you can customize to solve a recurring design problem in your code. You can\u2019t just find a pattern and copy it into your program, the way you can with off-the-shelf functions or libraries. The pattern is not a specific piece of code, but a general concept for solving a particular problem. You can follow the pattern details and implement a solution that suits the realities of your own program. Patterns are often confused with algorithms, because both concepts describe typical solutions to some known problems. While an algorithm always defines a clear set of actions that can achieve some goal, a pattern is a more high-level description of a solution. The code of the same pattern applied to two different programs may be different. An analogy to an algorithm is a cooking recipe: both have clear steps to achieve a goal. On the other hand, a pattern is more like a blueprint: you can see what the result and its features are, but the exact order of implementation is up to you.","title":"What is Design Pattern"},{"location":"designPattern/design-pattern-intro/#what-does-the-pattern-consist-of","text":"Most patterns are described very formally so people can reproduce them in many contexts. Here are the sections that are usually present in a pattern description: Intent of the pattern briefly describes both the problem and the solution. Motivation further explains the problem and the solution the pattern makes possible. Structure of classes shows each part of the pattern and how they are related. Code example in one of the popular programming languages makes it easier to grasp the idea behind the pattern. Some pattern catalogs list other useful details, such as applicability of the pattern, implementation steps and relations with other patterns.","title":"What does the pattern consist of?"},{"location":"designPattern/behavioural/behaviour-dp/","text":"Bash 1 2 3 #!/bin/bash echo \"Hello world!\" C 1 2 3 4 5 #include <stdio.h> int main ( void ) { printf ( \"Hello world! \\n \" ); } C++ 1 2 3 4 5 6 #include <iostream> int main () { std :: cout << \"Hello world!\" << std :: endl ; return 0 ; } C# 1 2 3 4 5 6 7 using System ; class Program { static void Main ( string [] args ) { Console . WriteLine ( \"Hello world!\" ); } }","title":"Behaviour dp"},{"location":"designPattern/creational/creational-dp/","text":"Creational Design Pattern \u00b6 Creational design patterns provide various object creation mechanisms, which increase flexibility and reuse of existing code. Factory Method \u00b6 Shape.java 1 Square.java 1 Circle.java 1 Rectangle.java 1 ShapeFactory.java 1 FactoryDemo.java 1 Abstract Factory Method \u00b6 Color.java 1 Blue.java 1 Green.java 1 Red.java 1 Shape.java 1 Square.java 1 Circle.java 1 Rectangle.java 1 AbstractFactory.java 1 ColorFactory.java 1 ShapeFactory.java 1 FactoryProducer.java 1 AbstractFactoryPatternDemo.java 1 Singleton Pattern \u00b6 This is how Singleton Class looks like Singleton.java 1 Example Preferences.java 1 Settings.java 1 Contact.java 1 Home.java 1 SingletonDemo.java 1 Prototype Pattern \u00b6 Person.java 1 Car.java 1 Main.java 1 Lab Exam Creational Pattern \u00b6 AudioPlayer.java 1 MP3Player.java 1 JetAudioHDPlayer.java 1 WinAmpPlayer.java 1 VideoPlayer.java 1 VLCMediaPlayer.java 1 WindowsMediaPlayer.java 1 AdobeFlashPlayer.java 1 AbstractFactory.java 1 AudioPlayerFactory.java 1 VideoPlayerFactory.java 1 FactoryProducer.java 1 MusicPlayerFactoryDemo.java 1","title":"Creational Design Pattern"},{"location":"designPattern/creational/creational-dp/#creational-design-pattern","text":"Creational design patterns provide various object creation mechanisms, which increase flexibility and reuse of existing code.","title":"Creational Design Pattern"},{"location":"designPattern/creational/creational-dp/#factory-method","text":"Shape.java 1 Square.java 1 Circle.java 1 Rectangle.java 1 ShapeFactory.java 1 FactoryDemo.java 1","title":"Factory Method"},{"location":"designPattern/creational/creational-dp/#abstract-factory-method","text":"Color.java 1 Blue.java 1 Green.java 1 Red.java 1 Shape.java 1 Square.java 1 Circle.java 1 Rectangle.java 1 AbstractFactory.java 1 ColorFactory.java 1 ShapeFactory.java 1 FactoryProducer.java 1 AbstractFactoryPatternDemo.java 1","title":"Abstract Factory Method"},{"location":"designPattern/creational/creational-dp/#singleton-pattern","text":"This is how Singleton Class looks like Singleton.java 1 Example Preferences.java 1 Settings.java 1 Contact.java 1 Home.java 1 SingletonDemo.java 1","title":"Singleton Pattern"},{"location":"designPattern/creational/creational-dp/#prototype-pattern","text":"Person.java 1 Car.java 1 Main.java 1","title":"Prototype Pattern"},{"location":"designPattern/creational/creational-dp/#lab-exam-creational-pattern","text":"AudioPlayer.java 1 MP3Player.java 1 JetAudioHDPlayer.java 1 WinAmpPlayer.java 1 VideoPlayer.java 1 VLCMediaPlayer.java 1 WindowsMediaPlayer.java 1 AdobeFlashPlayer.java 1 AbstractFactory.java 1 AudioPlayerFactory.java 1 VideoPlayerFactory.java 1 FactoryProducer.java 1 MusicPlayerFactoryDemo.java 1","title":"Lab Exam Creational Pattern"},{"location":"designPattern/structural/structural-dp/","text":"Structural Pattern \u00b6 Flyweigt Pattern \u00b6 Shape.java 1 Circle.java 1 ShapeFactory.java 1 FlyweightPatternDemo.java 1 Flyweigt Pattern Example \u00b6 AlphabetGenerator.java 1 FlyweightDemo.java 1 Facade Pattern \u00b6 HomeTheater.java 1 Amplifier.java 1 DVDPlayer.java 1 Light.java 1 Popcorn.java 1 Projecter.java 1 FacadeDemo.java 1 Decorator Pattern \u00b6 Beverage.java 1 CondimentDecorator.java 1 DarkRoast.java 1 Decaf.java 1 Espresso.java 1 HouseBlend.java 1 Mocha.java 1 Soy.java 1 Beverage.java 1 SteamedMilk.java 1 WhippedMilk.java 1 MainStarBuzz.java 1 Composite Pattern \u00b6 Beverage.java 1 BankManager.java 1 Cashier.java 1 Accountant.java 1 CompositePatternDemo.java 1","title":"Structural Pattern"},{"location":"designPattern/structural/structural-dp/#structural-pattern","text":"","title":"Structural Pattern"},{"location":"designPattern/structural/structural-dp/#flyweigt-pattern","text":"Shape.java 1 Circle.java 1 ShapeFactory.java 1 FlyweightPatternDemo.java 1","title":"Flyweigt Pattern"},{"location":"designPattern/structural/structural-dp/#flyweigt-pattern-example","text":"AlphabetGenerator.java 1 FlyweightDemo.java 1","title":"Flyweigt Pattern Example"},{"location":"designPattern/structural/structural-dp/#facade-pattern","text":"HomeTheater.java 1 Amplifier.java 1 DVDPlayer.java 1 Light.java 1 Popcorn.java 1 Projecter.java 1 FacadeDemo.java 1","title":"Facade Pattern"},{"location":"designPattern/structural/structural-dp/#decorator-pattern","text":"Beverage.java 1 CondimentDecorator.java 1 DarkRoast.java 1 Decaf.java 1 Espresso.java 1 HouseBlend.java 1 Mocha.java 1 Soy.java 1 Beverage.java 1 SteamedMilk.java 1 WhippedMilk.java 1 MainStarBuzz.java 1","title":"Decorator Pattern"},{"location":"designPattern/structural/structural-dp/#composite-pattern","text":"Beverage.java 1 BankManager.java 1 Cashier.java 1 Accountant.java 1 CompositePatternDemo.java 1","title":"Composite Pattern"},{"location":"flask-doc/Flask%20Guide%20101/","text":"Flask Guide 101 Heroku setup heroku toolbelt Creating Environment \u00b6 Conda Environment \u00b6 1 2 conda create --name flask activate flask Virtualenv Environment \u00b6 Installing pip \u00b6 easy_install pip Installing Virtualenv \u00b6 pip install virtualenv Creating virtualenv \u00b6 virtualenv venv Activating virtualenv \u00b6 venv\\Scripts\\activate Installing Flask \u00b6 1 pip install flask Sample App Flask \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 # Basic flask application # hello.py from flask import Flask app = Flask ( __name__ ) @app . route ( '/' ) def index (): return '<h1>Learning Flask</h1>' @app . route ( '/user/<name>' ) def user ( name ): return 'Hello, %s ' % format ( name ) Running Server \u00b6 For Windows 1 2 set Flask_App=hello.py flask run For Linux 1 2 export Flask_App=hello.py flask run or for production flask run --host 0.0.0.0 --port 5200 Flask Commandline \u00b6 1 2 3 4 5 6 7 8 9 10 # filename: cli.py import click from flask import Flask app = Flask ( __name__ ) @app . cli . command () def sayhi (): \"\"\"Say Hello.\"\"\" click . echo ( 'Hello' ) 1 2 set Flask_App=cli.py run sayhi Response Template \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 # filename: food.py from flask import Flask from flask import request app = Flask ( __name__ ) from flask import render_template @app . route ( '/dinner/' ) @app . route ( '/dinner/<food>' ) def eat ( food = None ): return render_template ( 'food.html' , food = food ) 1 2 3 4 5 6 7 8 9 10 11 <!\u2013\u2013 filename: food.html --> <!\u2013\u2013 Location: base_dir\\templates\\food.html --> <!doctype html> < title > What's for dinner? </ title > {% if food %} < h1 > I want {{ food }}! </ h1 > {% else %} < h1 > Anything is fine! </ h1 > {% endif %} Integrating Bootstrap \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 # filename: food.py # Location: base_dir\\food.py # Location: base_dir\\templates\\food.html from flask import Flask from flask import request from flask_bootstrap import Bootstrap app = Flask ( __name__ ) Bootstrap ( app ) from flask import render_template @app . route ( '/dinner/' ) @app . route ( '/dinner/<food>' ) def eat ( food = None ): return render_template ( 'food.html' , food = food , list = [ \"pizza\" , \"sushi\" , \"quinoa\" ]) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 <!-- filename: food.html --> <!-- Location: base_dir\\templates\\food.html --> {% extends \"bootstrap/base.html\" %} {% block title %}What's for dinner?{% endblock %} {% block content %} < div class = \"container\" > {% if food %} < div class = \"alert alert-success\" > < h1 > I want {{ food }}! </ h1 > {% else %} < div class = \"alert alert-info\" > < h1 > Anything is fine! </ h1 > {% endif %} </ div > {% if list %} < p > Now we'll loop through the list </ p > < ul > {% for n in list %} < li >< a href = \"/dinner/{{n}}\" > {{n}} </ li > {% endfor %} </ ul > {% endif %} </ div > {% endblock %} Create Web Forms \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 # filename: food.py # Location: base_dir\\hello.py # Location: base_dir\\templates\\hello.html from flask import Flask , render_template , flash , request from wtforms import Form , TextField , TextAreaField , StringField , SubmitField from flask_bootstrap import Bootstrap # App config. DEBUG = True app = Flask ( __name__ ) Bootstrap ( app ) app . config . from_object ( __name__ ) app . config [ 'SECRET_KEY' ] = 'SuperSecretKey' class NameForm ( Form ): name = TextField ( 'Name:' ) @app . route ( \"/\" , methods = [ 'GET' , 'POST' ]) def hello (): form = NameForm ( request . form ) print ( form . errors ) if request . method == 'POST' : name = request . form [ 'name' ] print ( name ) flash ( 'Hello ' + name ) return render_template ( 'hello.html' , form = form ) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 <!-- filename: food.html --> <!-- Location: base_dir\\templates\\food.html --> {% extends \"bootstrap/base.html\" %} {% block title %} Form Demo {% endblock %} {% block content %} < div class = \"container\" > < h1 > Form Demo </ h1 > {% with messages = get_flashed_messages(with_categories=true) %} {% if messages %} < ul > {% for message in messages %} < li > {{ message[0] }} </ li > {% endfor %} </ ul > {% endif %} {% endwith %} < form action = \"\" method = \"post\" > < div class = \"form-group\" > {{ form.name.label }} {{ form.name(class=\"form-control\",placeholder=\"What's your name?\") }} </ div > < div class = \"input submit\" > < button type = \"submit\" class = \"btn btn-success\" > Submit </ button > </ div > </ form > </ div > {% endblock %} CGPA Prediction System \u00b6 cgpaPrediction.py 1 2 3 # filename: cgpaPrediction.py # Location: base_dir\\cgpaPrediction.py # Location: base_dir\\templates\\index.html index.html 1 2 <!-- filename: index.html --> <!-- Location: base_dir\\templates\\index.html -->","title":"Flask Guide 101"},{"location":"flask-doc/Flask%20Guide%20101/#creating-environment","text":"","title":"Creating Environment"},{"location":"flask-doc/Flask%20Guide%20101/#conda-environment","text":"1 2 conda create --name flask activate flask","title":"Conda Environment"},{"location":"flask-doc/Flask%20Guide%20101/#virtualenv-environment","text":"","title":"Virtualenv Environment"},{"location":"flask-doc/Flask%20Guide%20101/#installing-pip","text":"easy_install pip","title":"Installing pip"},{"location":"flask-doc/Flask%20Guide%20101/#installing-virtualenv","text":"pip install virtualenv","title":"Installing Virtualenv"},{"location":"flask-doc/Flask%20Guide%20101/#creating-virtualenv","text":"virtualenv venv","title":"Creating virtualenv"},{"location":"flask-doc/Flask%20Guide%20101/#activating-virtualenv","text":"venv\\Scripts\\activate","title":"Activating virtualenv"},{"location":"flask-doc/Flask%20Guide%20101/#installing-flask","text":"1 pip install flask","title":"Installing Flask"},{"location":"flask-doc/Flask%20Guide%20101/#sample-app-flask","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 # Basic flask application # hello.py from flask import Flask app = Flask ( __name__ ) @app . route ( '/' ) def index (): return '<h1>Learning Flask</h1>' @app . route ( '/user/<name>' ) def user ( name ): return 'Hello, %s ' % format ( name )","title":"Sample App Flask"},{"location":"flask-doc/Flask%20Guide%20101/#running-server","text":"For Windows 1 2 set Flask_App=hello.py flask run For Linux 1 2 export Flask_App=hello.py flask run or for production flask run --host 0.0.0.0 --port 5200","title":"Running Server"},{"location":"flask-doc/Flask%20Guide%20101/#flask-commandline","text":"1 2 3 4 5 6 7 8 9 10 # filename: cli.py import click from flask import Flask app = Flask ( __name__ ) @app . cli . command () def sayhi (): \"\"\"Say Hello.\"\"\" click . echo ( 'Hello' ) 1 2 set Flask_App=cli.py run sayhi","title":"Flask Commandline"},{"location":"flask-doc/Flask%20Guide%20101/#response-template","text":"1 2 3 4 5 6 7 8 9 10 11 12 # filename: food.py from flask import Flask from flask import request app = Flask ( __name__ ) from flask import render_template @app . route ( '/dinner/' ) @app . route ( '/dinner/<food>' ) def eat ( food = None ): return render_template ( 'food.html' , food = food ) 1 2 3 4 5 6 7 8 9 10 11 <!\u2013\u2013 filename: food.html --> <!\u2013\u2013 Location: base_dir\\templates\\food.html --> <!doctype html> < title > What's for dinner? </ title > {% if food %} < h1 > I want {{ food }}! </ h1 > {% else %} < h1 > Anything is fine! </ h1 > {% endif %}","title":"Response Template"},{"location":"flask-doc/Flask%20Guide%20101/#integrating-bootstrap","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 # filename: food.py # Location: base_dir\\food.py # Location: base_dir\\templates\\food.html from flask import Flask from flask import request from flask_bootstrap import Bootstrap app = Flask ( __name__ ) Bootstrap ( app ) from flask import render_template @app . route ( '/dinner/' ) @app . route ( '/dinner/<food>' ) def eat ( food = None ): return render_template ( 'food.html' , food = food , list = [ \"pizza\" , \"sushi\" , \"quinoa\" ]) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 <!-- filename: food.html --> <!-- Location: base_dir\\templates\\food.html --> {% extends \"bootstrap/base.html\" %} {% block title %}What's for dinner?{% endblock %} {% block content %} < div class = \"container\" > {% if food %} < div class = \"alert alert-success\" > < h1 > I want {{ food }}! </ h1 > {% else %} < div class = \"alert alert-info\" > < h1 > Anything is fine! </ h1 > {% endif %} </ div > {% if list %} < p > Now we'll loop through the list </ p > < ul > {% for n in list %} < li >< a href = \"/dinner/{{n}}\" > {{n}} </ li > {% endfor %} </ ul > {% endif %} </ div > {% endblock %}","title":"Integrating Bootstrap"},{"location":"flask-doc/Flask%20Guide%20101/#create-web-forms","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 # filename: food.py # Location: base_dir\\hello.py # Location: base_dir\\templates\\hello.html from flask import Flask , render_template , flash , request from wtforms import Form , TextField , TextAreaField , StringField , SubmitField from flask_bootstrap import Bootstrap # App config. DEBUG = True app = Flask ( __name__ ) Bootstrap ( app ) app . config . from_object ( __name__ ) app . config [ 'SECRET_KEY' ] = 'SuperSecretKey' class NameForm ( Form ): name = TextField ( 'Name:' ) @app . route ( \"/\" , methods = [ 'GET' , 'POST' ]) def hello (): form = NameForm ( request . form ) print ( form . errors ) if request . method == 'POST' : name = request . form [ 'name' ] print ( name ) flash ( 'Hello ' + name ) return render_template ( 'hello.html' , form = form ) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 <!-- filename: food.html --> <!-- Location: base_dir\\templates\\food.html --> {% extends \"bootstrap/base.html\" %} {% block title %} Form Demo {% endblock %} {% block content %} < div class = \"container\" > < h1 > Form Demo </ h1 > {% with messages = get_flashed_messages(with_categories=true) %} {% if messages %} < ul > {% for message in messages %} < li > {{ message[0] }} </ li > {% endfor %} </ ul > {% endif %} {% endwith %} < form action = \"\" method = \"post\" > < div class = \"form-group\" > {{ form.name.label }} {{ form.name(class=\"form-control\",placeholder=\"What's your name?\") }} </ div > < div class = \"input submit\" > < button type = \"submit\" class = \"btn btn-success\" > Submit </ button > </ div > </ form > </ div > {% endblock %}","title":"Create Web Forms"},{"location":"flask-doc/Flask%20Guide%20101/#cgpa-prediction-system","text":"cgpaPrediction.py 1 2 3 # filename: cgpaPrediction.py # Location: base_dir\\cgpaPrediction.py # Location: base_dir\\templates\\index.html index.html 1 2 <!-- filename: index.html --> <!-- Location: base_dir\\templates\\index.html -->","title":"CGPA Prediction System"}]}